// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  clerkId         String   @unique
  email           String   @unique
  firstName       String?
  lastName        String?
  imageUrl        String?
  subscriptionTier SubscriptionTier @default(FREE)
  
  // Creator profile
  brandGuidelines Json?
  contentPillars  String[]
  toneOfVoice     String?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  workflows       Workflow[]
  connectedAccounts ConnectedAccount[]
  executions      WorkflowExecution[]
  subscriptions   Subscription[]
  usageMetrics    UsageMetric[]
  
  @@map("users")
}

model ConnectedAccount {
  id           String   @id @default(cuid())
  userId       String
  platform     Platform
  accountId    String
  accountName  String?
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  isActive     Boolean  @default(true)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, platform, accountId])
  @@map("connected_accounts")
}

model Workflow {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  
  // Workflow configuration
  steps       Json     // Array of workflow steps
  triggers    Json     // Trigger conditions
  settings    Json?    // Additional settings
  
  // Status and metadata
  status      WorkflowStatus @default(DRAFT)
  version     Int      @default(1)
  isTemplate  Boolean  @default(false)
  
  // Performance tracking
  totalExecutions Int    @default(0)
  successfulExecutions Int @default(0)
  avgExecutionTime Float? // in seconds
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions  WorkflowExecution[]
  
  @@map("workflows")
}

model WorkflowExecution {
  id          String   @id @default(cuid())
  workflowId  String
  userId      String
  
  // Execution details
  status      ExecutionStatus
  startedAt   DateTime @default(now())
  completedAt DateTime?
  executionTime Int?   // in milliseconds
  
  // Step tracking
  currentStep Int      @default(0)
  stepResults Json?    // Results from each step
  errorLog    String?
  
  // Resource usage
  apiCallsMade Int     @default(0)
  costIncurred Float   @default(0) // in USD
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("workflow_executions")
}

model Subscription {
  id          String   @id @default(cuid())
  userId      String
  
  // Stripe details
  stripeSubscriptionId String? @unique
  stripeCustomerId     String?
  stripePriceId        String?
  
  // Subscription details
  tier        SubscriptionTier
  status      SubscriptionStatus
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean @default(false)
  
  // Usage limits
  workflowExecutionsLimit Int @default(10)
  storageLimit           Int @default(1000) // in MB
  integrationsLimit      Int @default(5)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscriptions")
}

model UsageMetric {
  id          String   @id @default(cuid())
  userId      String
  
  // Time period
  date        DateTime @db.Date
  
  // Usage counters
  workflowExecutions Int @default(0)
  apiCallsMade      Int @default(0)
  storageUsed       Int @default(0) // in MB
  costIncurred      Float @default(0) // in USD
  
  // Breakdown by service
  openaiCalls       Int @default(0)
  anthropicCalls    Int @default(0)
  midjourneyJobs    Int @default(0)
  socialPosts       Int @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
  @@map("usage_metrics")
}

model Asset {
  id          String   @id @default(cuid())
  userId      String
  
  // File details
  filename    String
  originalName String
  mimeType    String
  size        Int      // in bytes
  url         String
  
  // Metadata
  tags        String[]
  description String?
  aiGenerated Boolean  @default(false)
  workflowId  String?  // If generated by workflow
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([tags])
  @@map("assets")
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  service     String   // openai, anthropic, midjourney, etc.
  keyName     String   // User-defined name
  encryptedKey String
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, service, keyName])
  @@map("api_keys")
}

// Enums
enum SubscriptionTier {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  INCOMPLETE
  TRIALING
}

enum Platform {
  INSTAGRAM
  TIKTOK
  YOUTUBE
  TWITTER
  LINKEDIN
  FACEBOOK
  PINTEREST
  OPENAI
  ANTHROPIC
  MIDJOURNEY
  STABILITY_AI
  ELEVEN_LABS
  RUNWAY
  PIKA
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}
